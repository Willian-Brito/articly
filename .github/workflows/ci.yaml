name: Continuous Integration

on:
  push:
    branches:
      - main

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:

  # ======================================================
  # 1. Versionamento do Projeto
  # ======================================================
  versioning:
    runs-on: ubuntu-latest
    name: Versioning

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0 
      
      - uses:  codacy/git-version@2.8.3
        id: version
        with:
          release-branch: main
          prefix: v

      - name: Repository Tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::notice:: ${{ steps.version.outputs.version }}"
          git config --global user.email "${{ github.actor }}"@users.noreply.github.com
          git config --global user.name "${{ github.actor }}"
          git tag -a "${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
          git push --tags
        if: github.ref == 'refs/heads/main'
      
      - name: Create file version
        run: |
          echo ${{ steps.version.outputs.version }} > version.txt
        if: github.ref == 'refs/heads/main'

      - uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
        if: github.ref == 'refs/heads/main'

  # ======================================================
  # 2. Build e Testes do Backend (.NET)
  # ======================================================
  build-and-test-server:
    runs-on: ubuntu-latest
    name: Build and Test Server (.NET)
    needs: versioning
    defaults:
      run:
        working-directory: app/server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      - name: Restore
        run: |
            dotnet restore ./Articly.sln
  
      - name: Build
        run: |          
            dotnet build --no-restore --configuration Release ./Articly.sln
      
      - name: Test
        run: |                          
            dotnet test ./Articly.sln --no-restore --no-build --configuration Release --logger trx --results-directory "TestResults"

      - uses: actions/upload-artifact@v4
        with:
            name: dotnet-test-results
            path: app/server/TestResults  

  # ======================================================
  # 3. Build e Testes do Frontend (Vue)
  # ======================================================
  build-and-test-client:
    runs-on: ubuntu-latest
    name: Build and Test Client (Vue)
    needs: versioning
    defaults:
      run:
        working-directory: app/client
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 8

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit --if-present

      - name: Lint
        run: npm run lint --if-present

  # ======================================================
  # 4. Análise de Segurança de Código (SAST)
  # ======================================================
  sast:
    runs-on: ubuntu-latest
    needs: versioning
    name: SAST - Horusec Scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SAST - Horusec Run
        run: |
          curl -sL https://raw.githubusercontent.com/Willian-Brito/dev-sec-ops-learning/refs/heads/main/tools/horusec/horusec_docker_linux.sh| bash

      - name: SAST - Horusec Report Generation
        run: |
          cd reports
          curl -sL https://raw.githubusercontent.com/Willian-Brito/dev-sec-ops-learning/refs/heads/main/tools/horusec/horusec_json2md/horusec_json2md.py -o horusec_json2md.py 
          python3 horusec_json2md.py horusec_report.json horusec_report.md       

      - name: SAST - Horusec Upload Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: horusec-report
          path: reports/horusec_report.md

      - name: SAST - Horusec Results In Summary
        run: cat reports/horusec_report.md >> $GITHUB_STEP_SUMMARY

      - name: Run DefectDojo Integration
        if: always()
        uses: willian-brito/defect-dojo-action@main
        with:
          url_base: '${{ secrets.DEFECTDOJO_API }}/api/v2/'
          username: admin
          source_url: https://github.com/willian-brito/${{ github.event.repository.name }}
          tool: Horusec
          file: reports/horusec_report.json
          scan_type: Horusec Scan
          product_name: ${{ github.event.repository.name }}
          description: "Projeto de teste no DefectDojo"
          origin: "third party library"
          token: ${{ secrets.DEFECTDOJO_TOKEN }}

  # ======================================================
  # 5.  Análise de Segurança das Dependências (SCA)
  # ======================================================
  sca:
    needs: versioning
    runs-on: ubuntu-latest
    name: SCA - Dependency Check Scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Java (required for Dependency-Check)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run OWASP Dependency-Check
        
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: '${{ github.repository }}'
          path: '.'
          format: 'SARIF'          
          out: 'reports'
          args: |   
            --format HTML           
            --scan .
            --enableRetired
        env:
          JAVA_HOME: /opt/jdk

      - name: Upload vulnerability report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/dependency-check-report.html

      - name: Run DefectDojo Integration
        if: always()
        uses: willian-brito/defect-dojo-action@main
        with:
          url_base: '${{ secrets.DEFECTDOJO_API }}/api/v2/'
          username: admin
          source_url: https://github.com/willian-brito/${{ github.event.repository.name }}
          tool: Dependency-Check
          file: reports/dependency-check-report.sarif
          scan_type: SARIF
          product_name: ${{ github.event.repository.name }}
          description: "Projeto de teste no DefectDojo"
          origin: "third party library"
          token: ${{ secrets.DEFECTDOJO_TOKEN }}

  # ======================================================
  # 6. Análise de Segurança de Infra como Código (IaC)
  # ======================================================
  iac:
    needs: versioning
    runs-on: ubuntu-latest
    name: IaC - Kics Scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Kics Scan
        uses: checkmarx/kics-github-action@v2.1.13
        with:          
          path: '.'
          ignore_on_exit: results
          output_path: reports/
          output_formats: 'sarif'

      - name: Display kics results
        run: |
          cat reports/results.sarif

      - name: Upload vulnerability report        
        uses: actions/upload-artifact@v4
        with:
          name: kics-report
          path: reports/

      - name: Run DefectDojo Integration
        if: always()
        uses: willian-brito/defect-dojo-action@main
        with:
          url_base: '${{ secrets.DEFECTDOJO_API }}/api/v2/'
          username: admin
          source_url: https://github.com/willian-brito/${{ github.event.repository.name }}
          tool: Kics
          file: reports/results.sarif
          scan_type: SARIF
          product_name: ${{ github.event.repository.name }}
          description: "Projeto de teste no DefectDojo"
          origin: "third party library"
          token: ${{ secrets.DEFECTDOJO_TOKEN }}

  # ======================================================
  # 7. Build das Imagens Docker (client + server)
  # ======================================================
  docker-build:
    needs: [versioning, build-and-test-server, build-and-test-client, sast, sca, iac]
    runs-on: ubuntu-latest
    name: Build Docker Images

    env:
      version: ${{ needs.versioning.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Listing (Debug)
        run: ls -la

      # Backend (server)
      - name: Build Server Docker Image
        run: |
          docker build -t ${{ vars.DOCKERHUB_REPOSITORY }}/articly-server:${{ env.version }} \
            -f app/server/Presentation/Api/Dockerfile .

      # Frontend (client)
      - name: Build Client Docker Image
        run: |
          docker build -t ${{ vars.DOCKERHUB_REPOSITORY }}/articly-client:${{ env.version }} \
            -f app/client/Dockerfile .

      - name: Save Docker images as artifact
        run: |
          docker save ${{ vars.DOCKERHUB_REPOSITORY }}/articly-server:${{ env.version }} -o server.tar
          docker save ${{ vars.DOCKERHUB_REPOSITORY }}/articly-client:${{ env.version }} -o client.tar

      - uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            server.tar
            client.tar

  # ======================================================
  # 8. Analise de Segurança da Imagem Docker
  # ======================================================
  container-scan:
    needs: [versioning, docker-build]
    runs-on: ubuntu-latest
    name: Container Scan - Trivy Scan Docker Images

    env:
      version: ${{ needs.versioning.outputs.version }}

    steps:

      - uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .

      - name: Load Docker images
        run: |
          docker load -i server.tar
          docker load -i client.tar

      - name: Run Trivy Scan - Server
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: '${{ vars.DOCKERHUB_REPOSITORY }}/articly-server:${{ env.version }}'
          severity: 'MEDIUM,HIGH,CRITICAL'          
          format: 'sarif'          
          output: 'trivy-server.sarif'
          exit-code: '0'
  
      - name: Run Trivy Scan - Client
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: '${{ vars.DOCKERHUB_REPOSITORY }}/articly-client:${{ env.version }}'
          severity: 'MEDIUM,HIGH,CRITICAL'          
          format: 'sarif'          
          output: 'trivy-client.sarif'
          exit-code: '0'
      
      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-server.sarif
            trivy-client.sarif

      - name: Upload Trivy SARIF to GitHub Security - Server
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-server.sarif
          category: 'trivy-server'
  
      - name: Upload Trivy SARIF to GitHub Security - Client
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-client.sarif
          category: 'trivy-client'

      - name: Run DefectDojo Integration - Upload Trivy Server Report
        if: always()   
        uses: willian-brito/defect-dojo-action@main
        with:
          url_base: '${{ secrets.DEFECTDOJO_API }}/api/v2/'
          username: admin
          source_url: https://github.com/willian-brito/${{ github.event.repository.name }}
          tool: Trivy
          file: trivy-server.sarif
          scan_type: SARIF
          product_name: ${{ github.event.repository.name }}
          description: "Projeto de teste no DefectDojo"
          origin: "third party library"
          token: ${{ secrets.DEFECTDOJO_TOKEN }}


      - name: Run DefectDojo Integration - Upload Trivy Client Report
        if: always()   
        uses: willian-brito/defect-dojo-action@main
        with:
          url_base: '${{ secrets.DEFECTDOJO_API }}/api/v2/'
          username: admin
          source_url: https://github.com/willian-brito/${{ github.event.repository.name }}
          tool: Trivy
          file: trivy-client.sarif
          scan_type: SARIF
          product_name: ${{ github.event.repository.name }}
          description: "Projeto de teste no DefectDojo"
          origin: "third party library"
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          
  # ======================================================
  # 9. Push da Imagem para o Docker Hub
  # ======================================================
  docker-push:
    needs: [versioning, container-scan]
    runs-on: ubuntu-latest
    name: Push Docker Images

    env:
      version: ${{ needs.versioning.outputs.version }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .

      - name: Load Docker images
        run: |
          docker load -i server.tar
          docker load -i client.tar

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag Images as Latest
        run: |
          docker tag ${{ vars.DOCKERHUB_REPOSITORY }}/articly-server:${{ env.version }} \
                      ${{ vars.DOCKERHUB_REPOSITORY }}/articly-server:latest
          docker tag ${{ vars.DOCKERHUB_REPOSITORY }}/articly-client:${{ env.version }} \
                      ${{ vars.DOCKERHUB_REPOSITORY }}/articly-client:latest
        if: github.ref == 'refs/heads/main'

      - name: Push Docker Images
        run: |
          docker push --all-tags ${{ vars.DOCKERHUB_REPOSITORY }}/articly-server
          docker push --all-tags ${{ vars.DOCKERHUB_REPOSITORY }}/articly-client

  # =========================================================
  # 10. Análise de Segurança Dinâmica da Aplicação WEB (DAST)
  # =========================================================
  dast:
    runs-on: ubuntu-latest
    needs: docker-push
    name: DAST - Zap Scan

    steps:
    - name: Scan the Web Application
      continue-on-error: true
      uses: zaproxy/action-baseline@v0.14.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        target: ${{secrets.URL}}
        cmd_options: '-a -x zap-report.xml'
        artifact_name: 'zap-reports'

    - name: Run DefectDojo Integration
      if: always()
      uses: willian-brito/defect-dojo-action@main
      with:
        url_base: '${{ secrets.DEFECTDOJO_API }}/api/v2/'
        username: admin
        source_url: https://github.com/willian-brito/${{ github.event.repository.name }}
        tool: ZAP
        file: zap-report.xml
        scan_type: ZAP Scan
        product_name: ${{ github.event.repository.name }}
        description: "Projeto de teste no DefectDojo"
        origin: "third party library"
        token: ${{ secrets.DEFECTDOJO_TOKEN }}